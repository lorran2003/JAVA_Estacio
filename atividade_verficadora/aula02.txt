Uma situação comum em que a utilização do mecanismo de herança é vantajosa é quando temos classes que compartilham características comuns, mas também têm comportamentos específicos adicionais. Vamos criar um exemplo simples com um conceito de animais e, em seguida, demonstrar como a herança pode ser útil nesse contexto.

Suponha que temos uma classe Animal que representa características gerais dos animais, e queremos criar classes específicas para diferentes tipos de animais, como Cachorro e Gato, que herdam essas características gerais de Animal e também têm comportamentos específicos próprios.


// Classe Animal (classe base)
class Animal {
    private String nome;
    private int idade;

    public Animal(String nome, int idade) {
        this.nome = nome;
        this.idade = idade;
    }

    public void emitirSom() {
        System.out.println("O animal emite um som.");
    }

    public void mover() {
        System.out.println("O animal se move de alguma forma.");
    }

    // Getters e setters omitidos para simplificar
}

// Subclasse Cachorro
class Cachorro extends Animal {
    public Cachorro(String nome, int idade) {
        super(nome, idade);
    }

    @Override
    public void emitirSom() {
        System.out.println("O cachorro late.");
    }

    // Métodos específicos de Cachorro
    public void abanarRabo() {
        System.out.println("O cachorro está abanando o rabo.");
    }
}

// Subclasse Gato
class Gato extends Animal {
    public Gato(String nome, int idade) {
        super(nome, idade);
    }

    @Override
    public void emitirSom() {
        System.out.println("O gato mia.");
    }

    // Métodos específicos de Gato
    public void arranharMoveis() {
        System.out.println("O gato está arranhando os móveis.");
    }
}

public class Main {
    public static void main(String[] args) {
        Cachorro dog = new Cachorro("Rex", 3);
        Gato cat = new Gato("Whiskers", 2);

        dog.emitirSom(); // O cachorro late.
        dog.abanarRabo(); // O cachorro está abanando o rabo.
        cat.emitirSom(); // O gato mia.
        cat.arranharMoveis(); // O gato está arranhando os móveis.
    }
}





Uma situação em que o polimorfismo poderia ser aplicado é quando temos diferentes tipos de veículos que precisam ser tratados de maneira genérica em um sistema de transporte. Vamos criar um exemplo simples onde temos uma interface Veiculo comum para todos os tipos de veículos, e classes concretas como Carro, Moto e Ônibus que implementam essa interface. Em seguida, vamos demonstrar como o polimorfismo pode ser aplicado ao tratar esses veículos de maneira genérica.


// Interface Veiculo
interface Veiculo {
    void mover();
}

// Classe Carro implementando Veiculo
class Carro implements Veiculo {
    @Override
    public void mover() {
        System.out.println("O carro está se movendo na estrada.");
    }
}

// Classe Moto implementando Veiculo
class Moto implements Veiculo {
    @Override
    public void mover() {
        System.out.println("A moto está se movendo na rua.");
    }
}

// Classe Ônibus implementando Veiculo
class Onibus implements Veiculo {
    @Override
    public void mover() {
        System.out.println("O ônibus está se movendo na avenida.");
    }
}

// Classe principal para demonstração do polimorfismo
public class Main {
    public static void main(String[] args) {
        // Criando instâncias de diferentes tipos de veículos
        Veiculo veiculo1 = new Carro();
        Veiculo veiculo2 = new Moto();
        Veiculo veiculo3 = new Onibus();

        // Chamando o método mover() para cada veículo
        veiculo1.mover(); // O carro está se movendo na estrada.
        veiculo2.mover(); // A moto está se movendo na rua.
        veiculo3.mover(); // O ônibus está se movendo na avenida.
    }
}
